# -*- coding: utf-8 -*-
"""jogo_A1_William_CPP_D2.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BtCj-wretiYG_r0nx6y1Qj8AGN6fxKVI
"""

'''
Atividade Avaliativa A1 - 5,0pts

 - Nome: William Cavalcante da Silva

 - RGM: 1434383212

 - Tema: 10 jogos mais importantes da Historia do Basquete

 FONTES E LINKS:

 - https://www.nba.com/stats

 - https://www.nba.com/stats/alltime?SeasonType=Regular+Season

 - Curso Intensivo de Python: Uma introdução prática e baseada em projetos à programação, Eric Matthes:
Disponívem em Português: https://edisciplinas.usp.br/pluginfile.php/6585696/mod_resource/content/1/Eric%20Matthes%20-%20Curso%20Intensivo%20de%20Python-Novatec%20%282016%29.pdf

 - https://pandas.pydata.org/docs/
'''

import pandas as pd #--> importando a biblioteca pandas

#Criação de listas com os dados informados
GameDate = ['14/06/1998', '19/06/2016', '14/05/1980', '08/06/1986', '05/05/1969', '04/06/1976', '31/05/2002', '20/06/2013', '18/04/1962', '11/06/1997']
#--> Data do Jogo
AwayTeam = ['Chicago Bulls', 'Cavaliers', 'Los Angeles Lakers', 'Houston Rockets', 'Los Angeles Lakers', 'Phoenix Sun', 'Sacramento Kings', 'San Antonio Spurs', 'Los Angeles Lakers', 'Utah Jazz']
#--> Time Visitante
HomeTeam = ['Utah Jazz', 'Golden State Warriors', 'Philadelphia 76ers', 'Boston Celtics', 'Boston Celtics', 'Boston Celtics', 'Los Angeles Lakers', 'Miami Heats', 'Boston Celtics', 'Chicago Bulls']
#--> Time da Casa
AwayPts = ['87', '93', '108', '97', '105', '126', '102', '88', '107', '88']
#--> Quantidade de Pontos do Time Visitante
HomePts = ['86', '89', '103', '114', '99', '128', '106', '95', '110', '90']
#--> Quantidade de Pontos do Time da Casa
Referees = ['Dick Bavetta', 'Mike Callahan', 'Joe Forte', ' Joe Forte', 'Joe Forte', 'Richie Powers', 'Dick Bavetta', 'Dan Crawford', 'Richie Powers', 'Bill Oakes']
#--> Árbritos, podem ser até tres, mas so estou colocando um.
TimesTied = ['18', '11', '0', '0', '0', '0', '11', '11', '0', '7']
#--> Quantidade de vezes em que os times estavam empatados durante o jogo
LeadChanges = ['8', '20', '0', '0', '0', '0', '22', '7', '0', '7']
#--> Quantidade de vezes em que o lider de placar mudou
LastMeetingWinner = ['Chicago Bulls', 'Cavaliers', 'Los Angeles Lakers', 'Boston Celtics', 'Los Angeles Lakers', 'Boston Celtics', 'Sacramento Kings', 'Miami Heats', 'Los Angeles Lakers', 'Chicago Bulls']
#--> Vencedor do ultimo jogo entre os dois
Winner = ['Chicago Bulls', 'Cavaliers', 'Los Angeles Lakers', 'Boston Celtics', 'Los Angeles Lakers', 'Boston Celtics', 'Los Angeles Lakers', 'Miami Heats', 'Boston Celtics', 'Chicago Bulls']
#--> Vencedor da Partida em questão


#Criação de um dicionário com as listas informadas
dados_jogos= {
    'Data do jogo': GameDate,
    'Vencedor': Winner,
    'Time de Fora': AwayTeam,
    'Time da Casa': HomeTeam,
    'Pontos de Fora': AwayPts,
    'Pontos da Casa': HomePts,
    'árbitro Principal': Referees,
    'Pontos Iguais': TimesTied,
    'Mudançã de Liderança': LeadChanges,
    'Ultimo Vencedor': LastMeetingWinner,

}

#Criação de um DataFrame com o dicionário
jogos_df = pd.DataFrame(dados_jogos)

"""*   Usando a biblioteca Pandas foi-se criado um DataFrame sobre os jogos mais importantes na história do Basquete.
*   Usei listas para armazenar os dados coletados e, com as listas informadas, foi feito um dicionário, que foi utilizado para a criação do DataFrame e sua variável.
*   Todos os dados coletados foram tirados do site oficial da NBA e as informações sobre a criação do DataFrame foram tiradas do conteúdo mestrado em sala de aula e do livro "Curso Intensivo de Python: Uma introdução prática e baseada em projetos à programação" do autor Eric Matthes

### 1 - Apresente em tela (output) toda a base de dados.
"""

print("1) Apresente em tela (output) toda a base de dados.")
#Utilizo o comando display para apresentar todos os dados do DataFrame.
display(jogos_df)
print()

"""*   Para apresentar uma tela de display usamos o comando '**df.display**', que tem como principal função criar uma tabela com os dados apresentados no DataFrame.
*   Além da tabela, o comando '**df.display**' também permite a criação de gráficos a partir dos dados apresentados e a pesquisa de items dentro da tabela.
*   O código apresenta todos os dados contidos no DataFrame jogos_df de forma organizada e legível na saída da tela. sendo útil para visualizar rapidamente os registros da base de dados.

### 2 - Apresente o tamanho do seu dataframe (quantas linhas x colunas).
"""

print("2) Apresente o tamanho do seu dataframe (quantas linhas x colunas).")
#O comando shape mostrará as dimenções do DataFrame (Linhas e Colunas).
print(jogos_df.shape)
print()

"""*   O comando '**df.shape**' retorna uma tupla com a dimensão do DataFrame (o número de linhas e colunas).
*   É usado para saber quantas linhas e colunas existem no DataFrame e para o controle do tamanho do mesmo.

### 3 - Acesse a linha (x) e apresente em tela todas as características do item.
"""

print("3) Acesse a linha (x) e apresente em tela todas as características do item.")
#O comando iloc irá alocar apenas a linha e coluna especificada, neste caso, a primeira linha.
print(jogos_df.iloc[1])
print()

"""*   O indexador '**iloc**' seleciona os números inteiros das linhas, arrays ou por slice.
*   Podemos concluir que sua função principal é selecionar linhas e colunas por números, permitindo visualizar os detalhes específicos desse item no DataFrame .
*   Uma observação importante é que a linha ou coluna deve estar entre cochetes [] para que o indexador funcione de forma correta.

### 4 - Verifique se o DataFrame está vazio.
"""

print("4) Verifique se o dataframe está vazio.")
#Utilizando Do-While: imprimir na tela "o DataFrame está vazio" ou "O DataFrame não está vazio"
while jogos_df.empty:
  print("O DataFrame está vazio!")
  break
else:
  print("O DataFrame não está vazio!!")

#Usando df.empty: O comando empty irá retornar na tela se o DataFrame está vazio ou não utilizando true ou false
print("4) Verifique se o dataframe está vazio.")
print(jogos_df.empty)
print()

"""*   Através do modo '**Do-While**' é utilizado um loop while com a condição '**jogos_df.empty**', que verifica se o DataFrame está vazio e, com um retorno positivo, executa o loop
*   A inclusão do '**break**'foi feita para que o loop seja interrompido imediatamente após a primeira vez em que o código for rodado, não importando se o DataFrame está vazio ou não. Logo, o loop será rodado apenas uma vez.
*   Atravéz do método '**df.empty**', ele retornará na tela se o DataFrame está vazio ou não (usando *True* ou *False* para determinar sua resposta)

### 5 - Apresente em tela os 5 primeiros registros da base de dados.
"""

print("5) Apresente em tela os 5 primeiros registros da base de dados.")
#O comando head irá retonar a quantidade de linhas pedidas com o uso de (), neste caso, as 5 primeiras linahs serão retornadas.
print(jogos_df.head(5))
print()

"""*   A Função '**head**' retorna as primeiras 'x' linhas do objeto com base na posição. É útil para testar rapidamente se o seu objeto contém o tipo certo de dados.
*   se 'x' for um numero especifico de linhas (como foi feito acima) ela retorna-rá todas as linhas especificadas, e se for um numero maior será retornado todas as linhas presentes no DataFrame.

### 6 - Exclua um item (linha) de sua base de dados.
"""

print("6) Exclua um item (linha) de sua base de dados.")
#O comando drop irá excluir uma linha (especificada entre ()) do DataFrame.
jogos_df = jogos_df.drop(9)
print(jogos_df)
print()

"""*  A Função '**Drop**' remove linhas ou colunas quando se especifica os nomes das linhas ou eixos correspondentes, atualizando o DataFrame sem a mesma. Ao usar um índice múltiplo, os rótulos em níveis diferentes podem ser removidos especificando o nível.
*  A especificação da linha pode ser feita usando () logo após a função

### 7 - Adicione um item (linha) na sua base de dados.
"""

print("7) Adicione um item (linha) na sua base de dados.")
#adicionei uma nova linha no nosso DataFrame com a ajuda do dicionario.
novo_jogo = {
    'Data do jogo': '11/06/1997',
    'Time de Fora': 'Utah Jazz',
    'Time da Casa': 'Chicago Bulls',
    'Pontos de Fora': '88',
    'Pontos da Casa': '90',
    'árbitro Principal': 'Bill Oakes',
    'Pontos Iguais': '7',
    'Mudançã de Liderança': '7',
    'Ultimo Vencedor': 'Chicago Bulls',
    'Vencedor': 'Chicago Bulls',
    }
jogos_df = pd.concat([jogos_df, pd.DataFrame(novo_jogo, index=[5])],ignore_index=True)
print(jogos_df)
print()

"""*   novo_jogo está sendo criado apartir de um dicionário com chaves que representam atributos de um dos jogos de basquete que foi transformado em um DataFrame temporario e depois adicionado e concatenado com o DataFrame principal.
*   O comando '**index=[5]**' define o indice como 5 e o comando '**ignore_index=True**' reindexa as linhas do DataFrame resultante.

### 8 - Transponha a coluna para a linha em sua base de dados.
"""

print("8) Transponha a coluna para a linha em sua base de dados.")
#criei uma variável e aloquei ela ao comando T que irá transpor as colunas em linhas.
jogos_df = pd.DataFrame(dados_jogos)
df_transposto = jogos_df.T
print(df_transposto)

"""*   A função '**df.t**' tem como objetivo espelhar as diagonais do DataFrame, tornando assim as Colunas em Linhas e vice-versa.
*   O 'T' é um assessor da função transposto, sendo usado para facilitar o uso da função.

### 9 - Apresente em tela somente a 1ª e a 2ª coluna (rótulo) da base de dados.
"""

print("9) Apresente em tela somente a 1ª e a 2ª coluna (rótulo) da base de dados.")
#Utilizo uma variável do comando iloc, definindo as colunas que queremos alocar e apresentando-as em tela.
print(jogos_df.loc[:, ['Data do jogo', 'Vencedor']])
print()

"""*   A função '**df.loc**' é primariamente baseada nas labels da colunas, ela é uma variação da função '**Iloc**'e está sendo usada para chamar duas colunas especificas no DataFrame, nesse caso, está sendo usada para chamar as colunas 'Data do jogo' e 'Vencedor'

### 10 - Informe como foi desenvolvido o Projeto

O foco deste projeto foi criar e manipular um DataFrame usando a biblioteca Pandas em Python. Com o Tema escolhido sendo 10 melhores jogos de basquete na historia da NBA, foram coletados dados relevantes incluindo informações como data de jogo, vencedores, o nome dos times e suas devidas pontuaçoes e outras informações importantes como o nome do arbitro principal do jogo e numero de vezes em que o jogo estava empatado e a quantidade de vezes em que houve diferença de liderança.

Primeiro, criei listas com esses dados e as agrupei em um dicionário. Cada chave do dicionário representa uma característica de uma partida. Em seguida, utilizamos esse dicionário para criar um DataFrame, que é uma estrutura de dados bidimensional com rótulos para linhas e colunas, fornecida pela biblioteca Pandas.

Durante o projeto, apliquei várias operações ao DataFrame para responder às perguntas propostas. Utilizamos comandos específicos do Pandas, como shape para obter o tamanho do DataFrame, iloc para acessar linhas específicas, empty para verificar se o DataFrame estava vazio, head para mostrar os primeiros registros e drop para excluir uma linha.

Além disso, realizei a transposição do DataFrame usando o método T, que troca linhas por colunas, e acessei colunas específicas com loc. Cada comando foi escolhido para demonstrar diferentes manipulações possíveis em um DataFrame, facilitando a compreensão e análise dos dados.

O desenvolvimento do projeto também envolveu a explicação do que foi feito, usando o conhecimento que adquiri para explicar como aplicar corretamente os comandos e representar os dados de forma clara e precisa. Pesquisas adicionais e testes práticos foram necessários. No final, o projeto proporcionou uma boa compreensão da manipulação de dados com Pandas e mostrou como trabalhar eficientemente com dados de jogos de basquete.
"""