# -*- coding: utf-8 -*-
"""jogo_A1_William_CPP_D2.ipyn

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BtCj-wretiYG_r0nx6y1Qj8AGN6fxKVI

Atividade Avaliativa A1 - 5,0pts

 - Nome: William Cavalcante da Silva

 - RGM: 1434383212

 - Tema: 10 jogos mais importantes da Historia do Basquete

 FONTES E LINKS:

 - https://www.nba.com/stats

 - https://www.nba.com/stats/alltime?SeasonType=Regular+Season

 - Curso Intensivo de Python: Uma introdução prática e baseada em projetos à programação, Eric Matthes:
Disponívem em Português: https://edisciplinas.usp.br/pluginfile.php/6585696/mod_resource/content/1/Eric%20Matthes%20-%20Curso%20Intensivo%20de%20Python-Novatec%20%282016%29.pdf

- https://pandas.pydata.org/docs/
"""

import pandas as pd #--> importando a biblioteca pandas

#Criação de listas com os dados informados
GameDate = ['14/06/1998', '19/06/2016', '14/05/1980', '08/06/1986', '05/05/1969', '04/06/1976', '31/05/2002', '20/06/2013', '18/04/1962', '11/06/1997']
#--> Data do Jogo
AwayTeam = ['Chicago Bulls', 'Cavaliers', 'Los Angeles Lakers', 'Houston Rockets', 'Los Angeles Lakers', 'Phoenix Sun', 'Sacramento Kings', 'San Antonio Spurs', 'Los Angeles Lakers', 'Utah Jazz']
#--> Time Visitante
HomeTeam = ['Utah Jazz', 'Golden State Warriors', 'Philadelphia 76ers', 'Boston Celtics', 'Boston Celtics', 'Boston Celtics', 'Los Angeles Lakers', 'Miami Heats', 'Boston Celtics', 'Chicago Bulls']
#--> Time da Casa
AwayPts = ['87', '93', '108', '97', '105', '126', '102', '88', '107', '88']
#--> Quantidade de Pontos do Time Visitante
HomePts = ['86', '89', '103', '114', '99', '128', '106', '95', '110', '90']
#--> Quantidade de Pontos do Time da Casa
Referees = ['Dick Bavetta', 'Mike Callahan', 'Joe Forte', ' Joe Forte', 'Joe Forte', 'Richie Powers', 'Dick Bavetta', 'Dan Crawford', 'Richie Powers', 'Bill Oakes']
#--> Árbritos, podem ser até tres, mas so estou colocando um.
TimesTied = ['18', '11', '0', '0', '0', '0', '11', '11', '0', '7']
#--> Quantidade de vezes em que os times estavam empatados durante o jogo
LeadChanges = ['8', '20', '0', '0', '0', '0', '22', '7', '0', '7']
#--> Quantidade de vezes em que o lider de placar mudou
LastMeetingWinner = ['Chicago Bulls', 'Cavaliers', 'Los Angeles Lakers', 'Boston Celtics', 'Los Angeles Lakers', 'Boston Celtics', 'Sacramento Kings', 'Miami Heats', 'Los Angeles Lakers', 'Chicago Bulls']
#--> Vencedor do ultimo jogo entre os dois
Winner = ['Chicago Bulls', 'Cavaliers', 'Los Angeles Lakers', 'Boston Celtics', 'Los Angeles Lakers', 'Boston Celtics', 'Los Angeles Lakers', 'Miami Heats', 'Boston Celtics', 'Chicago Bulls']
#--> Vencedor da Partida em questão


#Criação de um dicionário com as listas informadas
dados_jogos= {
    'Data do jogo': GameDate,
    'Vencedor': Winner,
    'Time de Fora': AwayTeam,
    'Time da Casa': HomeTeam,
    'Pontos de Fora': AwayPts,
    'Pontos da Casa': HomePts,
    'árbitro Principal': Referees,
    'Pontos Iguais': TimesTied,
    'Mudançã de Liderança': LeadChanges,
    'Ultimo Vencedor': LastMeetingWinner,

}

#Criação de um DataFrame com o dicionário
jogos_df = pd.DataFrame(dados_jogos)

"""*   Usando a biblioteca Pandas foi-se criado um DataFrame sobre os jogos mais importantes na história do Basquete.
*   Usei listas para armazenar os dados coletados e, com as listas informadas, foi feito um dicionário, que foi utilizado para a criação do DataFrame e sua variável.
*   Todos os dados coletados foram tirados do site oficial da NBA e as informações sobre a criação do DataFrame foram tiradas do conteúdo mestrado em sala de aula e do livro "Curso Intensivo de Python: Uma introdução prática e baseada em projetos à programação" do autor Eric Matthes

### 1 - Apresente em tela (output) toda a base de dados.
"""

print("1) Apresente em tela (output) toda a base de dados.")
#Utilizo o comando display para apresentar todos os dados do DataFrame.
display(jogos_df)
print()

"""### Explicando o Código

1.  Criação de um Dicionário:

Um dicionário data é criado com chaves representando as colunas e valores como listas de dados para cada coluna.
*  ```Data do Jogo ```: Lista o dia, mês e ano em que aconteceram o jogo.
*  ```Vencedores ```: Lista os Vencedores do jogo.
*  ```Time de Fora ```: Lista com o nome dos times que não estão em sua cidade.
*  ```Time da Casa ```: Lista com o nome dos times que estão em sua cidade.
*  ```Pontos de Fora ```: Lista quantos pontos o time de fora fez durante o jogo.
*  ```Pontos da Casa ```: Lista quantos pontos o time da casa fez durante o jogo.
*  ```Árbitro Principal ```: Lista os nomes dos principais árbitros presentes durante o jogo.
*  ```Pontos Iguais ```: Lista quantas vezes os times tiveram pontuações iguais durante o jogo.
*  ```Mudança de Liderança ```: Lista quantas vezes o time que estava em liderança durante o jogo.
*  ```Ultimo Vencedor ```: Lista o vencedor do ultimo jogo atual entre os dois times.

2. Criação do DataFrame

* O dicionário dados_streaming é passado para o construtor  ```pd.DataFrame() ``` para criar um DataFrame chamado  ```jogos_df ```.
"""

jogos_df = pd.DataFrame(dados_jogos)

"""3. Exibição do DataFrame

* O método  ```display() ``` é utilizado para exibir o DataFrame jogos_df.
"""

display(jogos_df)

"""### 2 - Apresente o tamanho do seu dataframe (quantas linhas x colunas)."""

print("2) Apresente o tamanho do seu dataframe (quantas linhas x colunas).")
#O comando shape mostrará as dimenções do DataFrame (Linhas e Colunas).
num_linhas, num_colunas = jogos_df.shape
print(f"O DataFrame tem {num_linhas} linhas e {num_colunas} colunas.")
print()

"""### Explicando do Codigo

1. Apresentar o Tamanho do DataFrame:
* ```dataframe.shape```: Retorna uma tupla que contém o número de linhas e colunas do DataFrame. No formato ```(n_linhas, n_colunas)```.
* ```num_linhas, num_colunas = dataframe.shape```: Desempacota a tupla em duas variáveis: ```num_linhas``` e ```num_colunas```.
* ```print(f"O DataFrame tem {num_linhas} linhas e {num_colunas} colunas.")```: Imprime o tamanho do DataFrame no formato "O DataFrame tem X linhas e Y colunas".

### 3 - Acesse a linha (x) e apresente em tela todas as características do item.
"""

print("3) Acesse a linha (x) e apresente em tela todas as características do item.")
#O comando iloc irá alocar apenas a linha e coluna especificada, neste caso, a primeira linha.
linha_x = 3
print(f"Características da linha {linha_x}:")
print()
print(jogos_df.iloc[linha_x])

"""###**Explicação do Código**

* Acessar a linha específica (x) e exibir todas as suas características:

* ```linha_x = 3```: Define o índice da linha que queremos acessar, neste caso, a linha 3.
* ```print(f"Características da linha {linha_x}:")```: Imprime uma mensagem indicando qual linha estamos acessando.
* ```dataframe.iloc[linha_x]```: Acessa a linha de índice ```3``` do DataFrame ```dataframe``` utilizando o método ```iloc```. O método ```iloc``` permite acessar linhas e colunas pelo índice (inteiro) ao invés de rótulos (nomes).
* ```print(dataframe.iloc[linha_x])```: Exibe todas as características (valores de todas as colunas) da linha de índice ```3```.

### 4 - Verifique se o DataFrame está vazio.
"""

print("4) Verifique se o dataframe está vazio.")
#Utilizando Do-While: imprimir na tela "o DataFrame está vazio" ou "O DataFrame não está vazio"
while jogos_df.empty:
  print("O DataFrame está vazio!")
  break
else:
  print("O DataFrame não está vazio!!")

#Usando df.empty: O comando empty irá retornar na tela se o DataFrame está vazio ou não utilizando true ou false
print("4) Verifique se o dataframe está vazio.")
print(jogos_df.empty)
print()

"""###**Explicação do Código**

1. Definindo o DataFrame Vazio Antes de Usá-lo no Loop:


* ```while jogos_df.empty:```: Inicia um loop while, onde a condição de parada é que o DataFrame ```empty_df``` esteja vazio.
* ```print(f"O DataFrame está vazio!")```: Se o DataFrame estiver vazio, imprime a mensagem "O DataFrame está vazio!".
* ```break```: Encerra o loop após imprimir a mensagem.
* ```else:```: Parte do loop ```while``` que é executada se a condição do loop não for atendida (ou seja, se o DataFrame não estiver vazio).
* ```print("O DataFrame não está vazio!!")```: Imprime a mensagem "O DataFrame possui itens." se o DataFrame não estiver vazio.

2.   Usando df.empty
* Atravéz do método ```df.empty```, ele retornará na tela se o DataFrame está vazio ou não (usando True ou False para determinar sua resposta)

### 5 - Apresente em tela os 5 primeiros registros da base de dados.
"""

print("5) Apresente em tela os 5 primeiros registros da base de dados.")
#O comando head irá retonar a quantidade de linhas pedidas com o uso de (), neste caso, as 5 primeiras linahs serão retornadas.
print(jogos_df.head(5))
print()

"""### Explicando o Código

1. Exibir os 5 Primeiros Registros do DataFrame:

Neste trecho, estamos exibindo os 5 primeiros registros (linhas) do DataFrame dataframe utilizando o método head().

* ```print()```: Exibe o resultado de ```jogos_df.head(5)``` de forma mais amigável e interativa.
"""

print(jogos_df.head(5))

"""### 6 - Exclua um item (linha) de sua base de dados.


"""

print("6) Exclua um item (linha) de sua base de dados.")
#O comando drop irá excluir uma linha (especificada entre ()) do DataFrame.
jogos_df = jogos_df.drop(9)
print("\nDataFrame após a remoção da linha com índice 9:")
print(jogos_df)
print()

"""### Explicação do Código

1. Remover a Linha com Índice 9 (Chicago Bulls x Utah Jazz):

Neste trecho, estamos removendo a linha com índice 3 (correspondente ao jogo entre Chicago Bulls x Utah Jazz) do DataFrame ```jogos_df``` utilizando o método ```drop()```.
* ```jogos_df = jogos_df.drop(9)```: Retorna um novo DataFrame com a linha especificada removida.

### 7 - Adicione um item (linha) na sua base de dados.
"""

print("7) Adicione um item (linha) na sua base de dados.")
#adicionei uma nova linha no nosso DataFrame com a ajuda do dicionario.
novo_jogo = {
    'Data do jogo': '11/06/1997',
    'Time de Fora': 'Utah Jazz',
    'Time da Casa': 'Chicago Bulls',
    'Pontos de Fora': '88',
    'Pontos da Casa': '90',
    'árbitro Principal': 'Bill Oakes',
    'Pontos Iguais': '7',
    'Mudançã de Liderança': '7',
    'Ultimo Vencedor': 'Chicago Bulls',
    'Vencedor': 'Chicago Bulls',
    }
jogos_df = pd.concat([jogos_df, pd.DataFrame(novo_jogo, index=[5])],ignore_index=True)
print(jogos_df)
print()

"""### Explicação do Código

1. Novo Item a ser Adicionado:

* Este trecho define um novo item (um jogo) que será adicionado ao DataFrame. O item é representado como um dicionário com chaves correspondentes aos nomes das colunas do DataFrame.
"""

novo_jogo = {
    'Data do jogo': '11/06/1997',
    'Time de Fora': 'Utah Jazz',
    'Time da Casa': 'Chicago Bulls',
    'Pontos de Fora': '88',
    'Pontos da Casa': '90',
    'árbitro Principal': 'Bill Oakes',
    'Pontos Iguais': '7',
    'Mudançã de Liderança': '7',
    'Ultimo Vencedor': 'Chicago Bulls',
    'Vencedor': 'Chicago Bulls',
    }

"""2. Adicionar o Novo Item ao DataFrame Usando `pd.concat`:

* Neste trecho, estamos adicionando o novo jogo `novo_jogo` ao final do DataFrame `jogos_df` utilizando a função `pd.concat()`. O parâmetro `ignore_index=True` garante que os índices das linhas sejam redefinidos após a concatenação, para evitar índices duplicados.
"""

jogos_df = pd.concat([jogos_df, pd.DataFrame(novo_jogo, index=[5])],ignore_index=True)

"""### 8 - Transponha a coluna para a linha em sua base de dados."""

print("8) Transponha a coluna para a linha em sua base de dados.")
# Transpor uma coluna específica, por exemplo, a coluna 'vencedor'
coluna_vencedor_transposta = jogos_df['Vencedor'].to_frame().T

# Exibir a coluna transposta
print()
print("\nColuna 'Vencedor' transposta para linha:")
display(coluna_vencedor_transposta)

# Transpor todo o DataFrame e exibi-lo
print("\nDataFrame transposto:")
df_transposto = jogos_df.T
df_transposto

"""### Explicando o Código

1. Transpor uma Coluna Específica (Exemplo: Coluna 'Vencedor'):

* Aqui, estamos transpondo a coluna específica `'vencedor'` do DataFrame `jogos-df`. Primeiro, selecionamos essa coluna utilizando `jogos_df['Vencedor']`, depois convertemos em um DataFrame usando `to_frame()`, e finalmente aplicamos a transposição usando `.T`.
"""

coluna_vencedor_transposta = jogos_df['Vencedor'].to_frame().T

"""2. Transpor Todo o DataFrame:

* Se necessário, é possível transpor todo o DataFrame `jogos_df` utilizando o método `.T`. Isso trocará as linhas pelas colunas e vice-versa.
"""

df_transposto = jogos_df.T

"""### 9 - Apresente em tela somente a 1ª e a 2ª coluna (rótulo) da base de dados.

"""

print("9) Apresente em tela somente a 1ª e a 2ª coluna (rótulo) da base de dados.")
#Utilizo uma variável do comando iloc, definindo as colunas que queremos alocar e apresentando-as em tela.
print(jogos_df.loc[:, ['Data do jogo', 'Vencedor']])
print()

"""### Explicando o Código

1. Selecionar e Exibir Apenas a 1ª e 2ª Coluna:

* Aqui, estamos selecionando apenas as colunas `'Data do Jogo'` e `'Vencedor'` do DataFrame `jogos_df` utilizando a notação de lista dupla `[:, ['Data do jogo', 'Vencedor']]` a partir da função `loc`, que é uma variação da função `iloc`.
"""

print(jogos_df.loc[:, ['Data do jogo', 'Vencedor']])

"""### 10 - Informe como foi desenvolvido o Projeto

O foco deste projeto foi criar e manipular um DataFrame usando a biblioteca Pandas em Python. Com o Tema escolhido sendo 10 melhores jogos de basquete na historia da NBA, foram coletados dados relevantes incluindo informações como data de jogo, vencedores, o nome dos times e suas devidas pontuaçoes e outras informações importantes como o nome do arbitro principal do jogo e numero de vezes em que o jogo estava empatado e a quantidade de vezes em que houve diferença de liderança.

Primeiro, criei listas com esses dados e as agrupei em um dicionário. Cada chave do dicionário representa uma característica de uma partida. Em seguida, utilizamos esse dicionário para criar um DataFrame, que é uma estrutura de dados bidimensional com rótulos para linhas e colunas, fornecida pela biblioteca Pandas.

Durante o projeto, apliquei várias operações ao DataFrame para responder às perguntas propostas. Utilizamos comandos específicos do Pandas, como shape para obter o tamanho do DataFrame, iloc para acessar linhas específicas, empty para verificar se o DataFrame estava vazio, head para mostrar os primeiros registros e drop para excluir uma linha.

Além disso, realizei a transposição do DataFrame usando o método T, que troca linhas por colunas, e acessei colunas específicas com loc. Cada comando foi escolhido para demonstrar diferentes manipulações possíveis em um DataFrame, facilitando a compreensão e análise dos dados.

O desenvolvimento do projeto também envolveu a explicação do que foi feito, usando o conhecimento que adquiri para explicar como aplicar corretamente os comandos e representar os dados de forma clara e precisa. Pesquisas adicionais e testes práticos foram necessários. No final, o projeto proporcionou uma boa compreensão da manipulação de dados com Pandas e mostrou como trabalhar eficientemente com dados de jogos de basquete.
"""